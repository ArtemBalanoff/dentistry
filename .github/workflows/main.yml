name: main workflow for dentistry
on:
  workflow_dispatch:

jobs:
  backend_linter_tests:
    name: Testing Backend with Flake8
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: pip
      - name: Install requirements
        run: |
          python3 -m pip install --upgrade pip
          pip install -r ./dentistry-project/requirements.lint.txt
      - name: Test with Flake8
        run: python3 -m flake8 dentistry-project --count --show-source --statistics

  postman_tests:
    name: Testing with Postman Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: pip

      - name: Install requirements
        run: |
          python3 -m pip install --upgrade pip
          pip install -r ./dentistry-project/requirements.txt

      - name: Apply migrations and setup data
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DEBUG: True
          ALLOWED_HOSTS: localhost
          SECRET_KEY: secretkey
          CSRF_TRUSTED_ORIGINS: https://dentistry.servebeer.com
          DJANGO_ENV: production
        run: |
          cd dentistry-project/
          python3 manage.py migrate
          bash scripts/set_up_data.sh
          python3 manage.py runserver &

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman Collection
        run: |
          newman run postman_collection/Dentistry-Collection.postman_collection.json \
          --reporters cli,junit --reporter-junit-export newman-report.xml

      - name: Upload Postman Test Results
        uses: actions/upload-artifact@v3
        with:
          name: postman-test-results
          path: newman-report.xml

  build_backend_and_push_to_dockerhub:
    name: Build and Push Backend Image to DockerHub
    runs-on: ubuntu-latest
    needs:
      - backend_linter_tests
      - postman_tests
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: ./dentistry-project/
          push: true
          tags: artembalanoff/dentistry_backend:latest, artembalanoff/dentistry_backend:${{ github.sha }}
          cache-from: type=registry,ref=artembalanoff/dentistry_backend:latest

  build_gateway_and_push_to_dockerhub:
    name: Build and Push Gateway Image to DockerHub
    runs-on: ubuntu-latest
    needs:
      - backend_linter_tests
      - postman_tests
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Gateway Image
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          tags: artembalanoff/dentistry_gateway:latest, artembalanoff/dentistry_gateway:${{ github.sha }}
          cache-from: type=registry,ref=artembalanoff/dentistry_gateway:latest

  deploy:
    name: Deploy the App
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_dockerhub
      - build_gateway_and_push_to_dockerhub
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v3
      - name: Copy docker-compose.production.yml via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "dentistry"
      - name: Executing remote SSH commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd dentistry
            source .env
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down -v
            sudo docker compose -f docker-compose.production.yml up -d
            until sudo docker compose -f docker-compose.production.yml exec db pg_isready -U $POSTGRES_USER; do
              sleep 10
            done
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend bash scripts/set_up_data.sh
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/
